// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  passwordHash String
  isAdmin      Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Chat {
  id        String    @id @default(uuid())
  name      String
  modelId   String?   // ID выбранной модели ИИ
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  messages  Message[]

  @@index([updatedAt(sort: Desc)], name: "chat_updated_at_idx")
  @@index([createdAt], name: "chat_created_at_idx")
  @@map("chats")
}

model Message {
  id              String   @id @default(uuid())
  content         String
  role            String   // "user" или "assistant"
  thinkingProcess String?  // Содержимое из режима глубокого размышления
  createdAt       DateTime @default(now()) @map("created_at")
  chat            Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId          String   @map("chat_id")

  @@index([chatId, createdAt], name: "message_chat_id_created_at_idx")
  @@index([createdAt], name: "message_created_at_idx")
  @@map("messages")
}
